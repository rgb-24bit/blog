#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+TITLE:      org-mode搭建GTD系统
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com
#+DATE:       <2017-12-27 周三>

* 前言
  前段时间，受到繁杂的任务的折磨，我不得不寻找一个办法来减轻我在这方面的压力。

  这时，我想起了之前在一些博客上看到的用 *emacs* 的 *org-mode* 来进行 *GTD* 管理的文章。
  这让我受到了不少的启发，因此综合了几个博客的内容，搭建了自己的 *GTD系统* 。

  在这里分享出来，希望对你有所帮助。

* GTD系统
  既然谈到了 *GTD系统*, 那么便不得不先了解一下 *GTD系统* 是个什么东西。

  *GTD* 是一种行为管理的方法, 主要原则在于一个人需要通过记录的方式把头脑中的各种任务移出来。
  通过这样的方式，头脑可以不用塞满各种需要完成的事情，而集中精力在正在完成的事情。

  这样一来，你便不需要在繁杂的任务中寻找出目前需要做的那一个，而是直接根据记录做就可以了。
  
** 核心原则
   GTD系统由五条核心原则组成，分别是:

*** 收集 
    把任何你需要 *跟踪* 或者 *记住* 或者 *做* 的事情记在一个地方,
    这个地方可以是任何你可以方便进行保存的地方，包括但不限于: 电子邮箱, 笔记本, 云笔记。
    这个收集每个星期都应该至少清理一次。

*** 处理
    处理你的收集箱, 并遵循一个严格的工作流程:
     - 从最上面开始
     - 一次处理一项
     - 不把任何东西放回收件箱
     - 如果任何一项需要做:
       + 做, *如果花的时间少于两分钟*, 这也被称为两分钟原则
       + 自己或委托他人将它完成
       + 延期
     - 否则
       + 把它存档以便查询
       + 把它扔掉
       + 使它成熟以便下一步的处理

*** 管理
    通过一个列表集合来跟踪需要关注的项目
     - Todo: 要去做的或正在做的
     - Next: 下一步要做的任务
     - Project: 每个需要多于一个实际的行动才能完成的任务
     - Wait: 当你已经指派了一个事项给其他人或者在项目进行下去之前需要等待外部的事件, 就应当在你的系统当中跟踪以及定期检查是否已经可以采取行动或者需要发出一个提醒
     - Someday/Maybe: 这些事情你需要在某个点去做，但是不是马上
     同时, 你应该有一个归档系统, 用于保存相关信息。

*** 执行
    去做你计划好的事情, 不要随意延期，放弃 ！

*** 回顾
    至少以星期为周期，GTD要求你回顾所有你比较主要的“行动”,“项目”和“等待”的事项，
    确保所有的新任务或者即将到来的事件都进入你的系统，而且所有的事情都更新到符合最新的情况。

* 系统构建
  这一点是重要的, 虽然我们知道的 *GTD系统* 的核心原则, 并且看起来似乎很简单。

  但是，一个完整的 *GTD系统* 的构建需要一个适合的 *工具*, 这个工具的定义没有统一的标准，
  不过你需要保证这个工具是你 *大部分时间都可以接触的到的* ， 这样你才能保证随时查看你的
  *GTD系统* 来获取你需要完成的事情。

  而我每天大部分时间都坐在电脑面前， 所以我选择了 *emacs* 编辑器的 *org-mode* 来帮助我来构建自己的 *GTD* 系统.
  因为, 这个模式真的很强大 !

  [[file:img/GTD.png]]
  
  这是我现在使用 *org-mdoe* 生成的任务界面, 可以根据开始时间, 任务分类, 任务状态, 优先级
  等列出这一周的任务, 当然也可以很方便的切换到 一个月或当天的任务列表.

  好了，废话不多说，直接开始 *GTD系统* 的构建了。

** 文件划分
   在开始之前，你需要注意，如果你没有用过 *emacs* 或 没有用过 *org-mode*, 建议你先去看一下 *org-mode* 的
   基本使用在来研究接下来的内容。这方面的教程网上内容很多，我就不多说了！

   我的文件目录结构:
   #+BEGIN_EXAMPLE
     GTD/
     |-- Log/              -- 日志文件夹
     |   |--2017/          -- 2017 日志文件夹
     |      |-- Dec.org    -- 12月日志文件
     |-- Inbox.org         -- 收集箱
     |-- Task.org          -- 任务文件
     |-- Plan.org          -- 计划文件, 用于做计划
     |-- Project.org       -- 项目文件
     |-- Routine.org       -- 日常任务文件
   #+END_EXAMPLE

   注: 这里的文件划分建议按照自己的习惯来进行, 我这样划分是因为适合我的生活习惯.

** 各文件作用及内容结构
   注: [...] 为必须内容, (...) 为可选内容, 标题下的各选项也是可选的, 但建议不要随意增加额外的项.
   *另*: 建立适用于自己的内容结构才是最好的, 我的只能给你你个参考.

*** Log 文件夹
    + 根据年份建立子文件夹, 用来保存每年的日志
    + 根据月份建立子文件, 用来保存每月的日志
    + 每周记录一次日志

    内容结构:
    + 顶级标题(即单个 * 开头): 时间段, 如: <2017-12-11 周一>--<2017-12-17 周日>
    + 二级标题(**): Task, Project, Routine, 值记录对应文件的日志, 其他文件不做考虑
      - Task: 根据时间顺序保存完成的任务
      - Project: 只保存完成状态(DONE | ABORT) 的任务, 项目中未完成的任务留待以后记录
      - Routine: 由于是日常任务, 所以直接保存每周的完成状况就好了.

    例:
    [[file:img/Log.png]]
    
*** Inbox 文件
    收集箱, 每周清理一次

    内容结构:
    + 顶级标题 某一任务
      - 任务相关信息

    注: 由于是收集箱, 所以格式也相对宽松。

*** Task 文件
    用于列出可以直接完成的任务(不归属与项目)

    内容结构:
    + 顶级标题 [任务状态] [优先级] 任务名 (完成率)
      - 任务时间计划: SCHEDULED && DEADLINE
      - 任务属性: :PROPERTIES: ... :END:
      - 任务状态切换记录: -State ....
      - 任务计时: :LOGBOOK:
      - 任务描述: Des: .....
      - 任务细分列表 ...

    注: 并不是每项都需要, 也不是必须这个格式, 大致一样就可以了
    
    例:
    [[file:img/Task.png]]

*** Project 文件   
    用于列出需要多步完成的 "项目".

    内容结构:
    + 顶级标题 项目名
      - 项目描述: Des: ...
      - 相关信息(简短): ...
      - 二级标题 [任务状态] [优先级] 任务名 (完成率)
        + 其他同 *Task* 结构

    例:
    [[file:img/Prj.png]]

*** Routine 文件   
    用于列出日常任务(日常任务是将要持续较长时间循环的单一任务)

    内容结构:
    + 顶级标题 [任务状态] [优先级] 任务名
      - 循环时间间隔
      - 任务属性: :PROPERTIES: ... :END:
      - 时间花费
      - 任务描述

    例:
    [[file:img/Rou.png]]

*** Plan 文件
    用于指定一定时间段的计划, 任务生成的参照因素.

    内容结构
    + 顶级标题 时间段
      - 相关计划

    注: 计划多变, 不使用固定格式, 但顶级标题必须是一个时间段, 否则这个计划可能难以具有好的执行力.
** 标签设计
   我们知道, *org-mode* 允许为每一个任务添加标签, 所以设计一个好的标签系统也能为
   你浏览 *GTD系统* 的时候提供帮助信息.

*** 情景标签
    用于表名该任务在何种环境先完成

    + @Workplace 工作场所, 如教室, 办公室等
    + @Home 在家 在寝室
    + @Computer 有电脑的时候
    + @Call 打电话的时候
    + @Way 在路上或外出
    + @Lunchtime 午休时间

*** 分类标签
    根据任务的类型设置的标签

    + @Urgent 紧急
    + @Import 重要

*** 收集箱标签
    
    + @Project 可能生成为项目
    + @Routine 可能生成为日常任务
    + @Task    可能生成为一般任务


** 任务设置
*** 任务优先级
    这个可以根据 S-Up/Down 快捷键来设置, 默认三个等级
    [#A], [#B], [#C]

*** 任务状态 
    这个可以在你的 .emacs.d 里进行配置, 这是我的配置:

    #+BEGIN_SRC emacs-lisp
      ;; (a@/!): a 是快捷键, @ 表示切换到这个状态时会提示输出, ! 表示会记录切换到这个状态的时间戳, -state 的来源
      (setq org-todo-keywords
            '((sequence "TODO(t!)" "NEXT(n)" "WAITTING(w)" "SOMEDAY(s)" "MAYBE(m)" "|" "DONE(d@/!)" "ABORT(a@/!)")))
      )
    #+END_SRC

    含义:
    + TODO 目前要做的任务
    + NEXT 接下来要做的任务
    + WAITTING 具有前置条件的任务, 需要等待前置条件达成
    + SOMEDAY 将来要做的任务
    + MAYBE 可能要做的任务
    + DONE 完成的任务
    + ABORT 取消的任务
      
* 使用技巧
  上面的内容便是我的 *GTD系统* 构建的基本内容了。如果你想要参照完成自己的 *GTD系统* 的话，
  建议更多的按照自己的来，毕竟之前我也是参照其他人的来的，后来发现确实不太合适才自己重新综合
  定制了一番。

  在这里，分享一些 *org-mdoe* 的使用经验，也许可以方便你的使用。

  + 任务标签及状态
    - 任务状态切换快捷键: C-c C-t
    - 添加任务标签: C-c C-c
    - 添加本文件的任务标签:
      在文件头添加: =#+TAGS: { @Workplace(w) @Home(h) @Computer(c) @Call(a) @Way(y) @Lunchtime(l) }=
      然后在那一行按下快捷键: C-c C-c, 可以生成本文件都可以用的标签(可以不止一行)
    - 添加本文件任务共有标签:
      在文件头添加: =#+FILETAGS: 标签=, C-c C-c 即可
    - 标签可以继承，即低级标题可以继承高级标题的标签
  + 任务时间:
    - C-c C-s 插入开始时间
    - C-c C-d 插入截止时间
    - 在时间尾添加 [.][+/-][n][d/w/y] 可以生成循环任务,
      如: <2017-12-27 周三 .+1d> 表示从周三开始, 每天循环一次
  + 任务计时:
    C-c C-x C-i 开始计时
    C-c C-x C-o 结束计时
  + 任务属性:
    任务属性记录在 :PROPERTIES: ... :END: 中间, 格式是 :属性名: 属性值, 
    除了内建的几个属性以外, 你可以定义自己的属性.
  + Org-Agenda 模式:
    - 全局快捷键是: C-c a 进入选择界面
    - a 选择列出本周的任务列表, 可以按 d, w, m 在日, 周, 月之间切换显示
    - t 选择列出所有的任务, 会根据优先级排序

* 相关链接
  + 维基百科
    - [[https://zh.wikipedia.org/wiki/%E5%B0%BD%E7%AE%A1%E5%8E%BB%E5%81%9A][尽管去做]]
  + 个人博客
    - [[http://www.cnblogs.com/qlwy/archive/2012/06/15/2551034.html][神器中的神器org-mode之入门篇]]
    - [[http://blog.csdn.net/u014801157/article/details/24372485][Emacs月月积累（终结篇）：熟练使用org-mode管理日常事务]]
    - [[http://www.cnblogs.com/holbrook/archive/2012/04/17/2454619.html][用Org-mode实现GTD]]
    - [[http://blog.csdn.net/dc_726/article/details/8623879][用Org-mode实践《奇特的一生》]]
  + 官方网页
    - [[http://orgmode.org/][Org mode for Emacs – Your Life in Plain Text]]
