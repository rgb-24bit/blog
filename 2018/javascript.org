#+TITLE:      JavaScript 基础
#+AUTHOR:     rgb_24bit
#+EMAIL:      rgb-24bit@foxmail.com
#+DATE:       <2018-04-22 周日>

* 目录                                                    :TOC_4_gh:noexport:
- [[#简介][简介]]
- [[#html-dom][HTML DOM]]
  - [[#概念][概念]]
  - [[#方法和属性][方法和属性]]
  - [[#事件相关][事件相关]]
- [[#参考链接][参考链接]]

* 简介
  既然要学前端基础， 那么是绕不开 ~JavaScript~ 的了。

  对于 ~JavaScript~ 的基础语法来说， 如果有了其他语言的基础， 学习起来是很快的。

  如果从头开始， 循环判读一点一点学 ~JavaScript~ 的话， 无疑是有点浪费时间。

  所以， 我选择了通过 [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide][JavaScript 指南]] 来完成对 ~JavaScript~ 基础语法的学习。

  而这篇博客， 不会包含 ~JavaScript~ 基础语法的内容， 而是总结其他和 ~JavaScript~ 相关的内容。

* HTML DOM
** 概念
   在 ~HTML DOM~ 中， 所有事物都是 *节点*, ~DOM~ 是被视为 *节点树* 的 ~HTML~.

   + 整个 ~HTML~ 文档是一个 *文档节点*
   + 每个 ~HTML~ 元素是一个 *元素节点*
   + ~HTML~ 元素内的文本是 *文本节点*
   + ~HTML~ 元素的属性是 *属性节点*
   + 注释是 *注释节点*

   *HTML DOM 节点树*:

   [[file:http://www.w3school.com.cn/i/ct_htmltree.gif]]

   如果熟悉 *树* 结构， 那么以下概念应该很熟悉：
   + 在 *节点树* 中， 顶端节点被称为 *根节点(root)*
   + 除了 *根结点* 以外的每个节点都有 *父节点(parent)*
   + 一个节点可以拥有任意数量的 *子节点(child)*
   + 拥有相同 *父节点* 的节点是 *同胞(sibling)*

** 方法和属性
   在 ~HTML DOM~ 中， 所有 *元素节点* 都被定义为 *对象*, 这些对象具有一些 *方法* 和 *属性*.

   我们可以通过这些 *方法* 和 *属性* 完成对 ~HTML~ 的操作， 如添加修改元素， 设置元素内容等。

   这些 *对象* 的 *方法* 还是很多的， 这里列举出常用的一些方法：
   |--------------------------+---------------------------------------------------------------|
   | 方法                     | 描述                                                          |
   |--------------------------+---------------------------------------------------------------|
   | ~getElementById()~         | 返回带有指定 ID 的元素                                        |
   | ~getElementsByTagName()~   | 返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组） |
   | ~getElementsByClassName()~ | 返回包含带有指定类名的所有元素的节点列表                      |
   | ~appendChild()~            | 在指定节点后面添加新的节点                                    |
   | ~removeChild()~            | 删除子节点                                                    |
   | ~replaceChild()~           | 替换子节点                                                    |
   | ~insertBefore()~           | 在指定的子节点前面插入新的子节点                              |
   | ~createAttribute()~        | 创建属性节点                                                  |
   | ~createElement()~          | 创建元素节点                                                  |
   | ~createTextNode()~         | 创建文本节点                                                  |
   | ~getAttribute()~           | 返回指定的属性值                                              |
   | ~setAttribute()~           | 把指定属性设置或修改为指定的值                                |
   |--------------------------+---------------------------------------------------------------|
   
   当然了， 这些 *对象* 的属性也不少， 这里介绍两个：
   + innerHTML :: 用来 *获取或修改* 元素的内容
   + style :: 这其实也是一个对象， 用于 *获取或修改* 元素的样式

   #+BEGIN_SRC javascript
     var obj = document.getElementById("info");  // 获取 id 为 info 的 元素节点

     alert(obj.innerHTML);  // 获取该节点的内容

     obj.innerHTML = "Hello World !";  // 修改该节点的内容

     document.getElementById("text").style.color="blue";  // 设置 id 为 text 的 元素节点 的 color 为 blue
   #+END_SRC

   对于更多的 *方法* 和 *属性*, 建议在需要时查阅相关文档。
  
   另外， 这里要介绍一个比较特殊的对象 ~document~.

   这是一个 *全局对象*, 代表了整个 ~HTML~ 文档。 前面介绍的 *方法* 和 *属性* 都是属于 ~HTML DOM~ *对象* 的。

   在获取到其他 *对象* 之前， 使用这些 *方法* 和 *属性* 应该通过 ~document~ 对象来进行。

** 事件相关
   ~HTML DOM~ 允许 ~JavaScript~ 对 ~HTML~ 事件作出反应。

   *事件* 的种类有很多， 包括 *鼠标点击*, *键盘输入* 等。

   如果需要 ~JavaScript~ 对 *事件* 作出反应， 需要将 *事件* 绑定到 ~HTML~ 元素上， 即 *分配事件*.

   *分配事件的三种方式*:
   + EventTarget.addEventListener :: 使用 *DOM 对象* 的 ~addEventListener~ 方法
        #+BEGIN_SRC javascript
          // Assuming myButton is a button element
          myButton.addEventListener('click', function(){alert('Hello world');}, false);
        #+END_SRC
   + HTML 属性 :: 使用 ~HTML~ 元素对应事件的属性
                #+BEGIN_SRC html
                  <button onclick="alert('Hello world!')">
                #+END_SRC
   + DOM 对象属性  :: 使用 *DOM 对象* 对应事件的属性
                  #+BEGIN_SRC javascript
                    // Assuming myButton is a button element
                    myButton.onclick = function(event){alert('Hello world');};
                  #+END_SRC
   
   这里的 *onclick* 代表的是 *onclick* 这个事件， 代表了 *鼠标在元素上点击*.

   另外， 在处理 *事件* 的 ~JavaScript~ 代码中， 可以通过 ~event~ 参数传入 ~Event~ 对象。

   这个对象具有一些方法及属性， 详情可以通过这个链接了解： [[https://developer.mozilla.org/zh-CN/docs/Web/API/Event#DOM_Event_interface][DOM Event 接口]].

* 参考链接
  + [[http://www.w3school.com.cn/htmldom/index.asp][HTML DOM 教程]]

