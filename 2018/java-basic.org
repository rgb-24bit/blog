#+TITLE:      Java 基础梳理
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com
#+DATE:       <2018-07-17 周二>

* 目录                                                    :TOC_4_gh:noexport:
- [[#前言][前言]]
- [[#语法无关内容][语法无关内容]]
- [[#原始数据类型和引用][原始数据类型和引用]]
- [[#数组和字符串][数组和字符串]]

* 前言
  本篇博客主要是对 ~Java~ 基础学习的一次梳理， 主要是对一些在其他语言中未接触过或有区别的内容
  的一次汇总。

  如果你是来找基础教程的， 建议还是买本书或者在网上找一篇更详细的教程， 那会比我描述的清楚的多。

* 语法无关内容
  ~Java~ 学习中有一些容易让人疑惑而与语法无关的内容， 这些内容教材上提到的少， 而平时又经常接触。

  这里列出来我接触到的内容， 首先是 ~Java~ 版本和 ~JDK~ 版本的关系。

  ~Java~ 版本和 ~JDK~ 版本并不是直接对应的关系， 这里是几个例子：
  |-----------+---------------|
  | Java 版本 | JDK 版本      |
  |-----------+---------------|
  | Java      | 1.02 - 1.1    |
  | Java 2    | 1.2, 1.3, 1.4 |
  | Java 5.0  | 1.5           |
  | Java 8    | 1.8           |
  |-----------+---------------|

  感觉目前常用的应该是 ~Java 8~, 所以记住 ~Java 8~ 对应的 ~JDK~ 版本是 ~1.8~ 就好。

  然后是几个名词和它们之间的关系：
  |------+--------------------------+------------------------------|
  | 名词 | 完整名称                 | 含义                         |
  |------+--------------------------+------------------------------|
  | JVM  | Java Virtual Machine     | Java 虚拟机                  |
  | JRE  | Java Runtime Environment | Java 运行环境， 包含了 *JVM*   |
  | JDK  | Java Development Kit     | Java 开发工具包， 包含了 *JRE* |
  |------+--------------------------+------------------------------|

  从这张图看的话就更直观：
  
  [[file:img/java-env.jpg]]

  最后是 *文件命名规则*, ~Java~ 文件命名不能随便命名， 需要遵循以下规则：
  + Java 保存的文件名必须与类名一致
  + 如果文件中只有一个类， 文件名必须与类名一致
  + 一个 Java 文件中只能有一个 public 类
  + 如果文件中不止一个类， 文件名必须与 public 类名一致
  + 如果文件中不止一个类， 而且没有 public 类， 文件名可与任一类名一致

* 原始数据类型和引用
  ~Java~ 关键字中有 ~8~ 个代表 *原始数据类型*, 这些原始数据类型在 ~java.lang~ 还存在与之对应的 *包装类型*.

  |----------+-----------+------+--------------------------|
  | 数据类型 | 包装类型  | 位数 | 值域                     |
  |----------+-----------+------+--------------------------|
  | boolean  | Boolean   |    ? | true/false               |
  | char     | Character |   16 | 0 ~ 65535                |
  | byte     | Byte      |    8 | -128 ~ 127               |
  | short    | Short     |   16 | -32768 ~ 32767           |
  | int      | Integer   |   32 | -2147483648 ~ 2147483647 |
  | long     | Long      |   64 | -很大 ~ +很大            |
  | float    | Float     |   32 | 范围规模可变             |
  | double   | Double    |   64 | 范围规模可变             |
  |----------+-----------+------+--------------------------|

  与 *原始数据类型* 相对应的是 *引用*, 两者的主要区别是： *原始数据类型* 保存实际的值，
  而 *引用* 保存 *对象的引用*.

  复杂举例说明：
  1. 假设存在 *原始数据类型* 变量 ~A~ 和 *引用* 变量 ~B~.
  2. 保存变量 ~A~ 的值的内存为 ~A_RAM~, 而保存变量 ~B~ 的值的内存为 ~B_RAM~.
  3. 当我们赋值给变量 ~A~ 时， 赋予的值会保存到 ~A_RAM~ 中。
  4. 当我们赋值给变量 ~B~ 时， 会在内存中创建一个区域用于保存我们要赋予的值， 假设这个区域叫做 ~O_RAM~.
     然后 ~Java~ 会把代表 ~O_RAM~ 的引用的 *值* 保存到 ~B_RAM~ 中。

  可以看到， 和变量 ~A~ 相关的内存只有 ~A_RAM~, 而和变量 ~B~ 相关的有 ~B_RAM~ 和 ~O_RAM~.

  *原始数据类型* 和 *引用* 变量的行为也因此存在区别：
  + 两个原始数据类型的变量是互不干扰的， 修改一个的值不会影响到另一个
  + 假如两个引用变量引用的是同一个对象， 如果其中一个引用变量操作对象修改了它的值， 那么另一个引用也会发生修改

  这有好处也有坏处， 当然了， 只要在使用的时候明白这一点， 应该也容易避免意外情况的发生。

  *一些注意事项：*
  + ~Java~ 没有无符号数， 因此无符号右移请使用 ~>>>~.

  + 定义 ~float~ 类型的变量需要加 ~f~ 后缀， 如： ~float f = 32.45f~, 否则小数会默认当做 ~double~ 处理

  + 布尔类型变量的值只有 ~true/false~, 不能使用 ~0, 1, null~ 等值代替。 需要布尔值的地方只能使用布尔类型的值或
    使用布尔表达式

  + 数值类型(包括 char)的默认值为 ~0~, 布尔类型默认为 ~false~, 引用默认为 ~null~

  + 使用 ~==~ 判断两个原始数据类型的 *值* 是否相同， 判断两个引用是否为引用 *同一个对象*

  + 如果要比较两个引用的对象的值是否相等， 请使用 ~equals~ 方法

  + 隐式类型转换 *只能* 发生在 *小 => 大* 的情况下， 比如 ~byte => int~

  + 原始数据类型没有方法， 如果需要使用相关的方法， 请使用对应的 *包装类型*

  + ~Java 5.0~ 开始引入了 ~autoboxing~ 机制， 允许在 参数、 返回值、布尔表达式、 数值运算 和 赋值等地方自动完成
    原始数据类型和对应的包装对象的转换

* 数组和字符串
  ~Java~ 中数组类型的变量属于 *引用*, 有如下几种声明和创建方式：
  #+BEGIN_SRC java
    // 声明数组
    dataType[] arrayRefVar;   // 首选的方法

    dataType arrayRefVar[];  // 效果相同，但不是首选方法

    // 创建数组
    dataType[] arrayRefVar = new dataType[arraySize];

    dataType[] arrayRefVar = {value0, value1, ..., valuek};  // 只能在声明的同时使用

    dataType[] arrayRefVar = new dataType[]{value0, value1, ..., valuek};
  #+END_SRC

  数组的 ~length~ 属性表示这个数组中元素的个数。

  而 ~Java~ 中 *字符串* 不是 *数组*, 不能像 ~str[i]~ 这样操作。

  同时 ~String~ 也不是关键字， 而是一种类型， 位于 ~java.lang~ 中的类型。

  ~Java~ 中字符串的一个强大的特性就是可以直接和其他类型的变量相 *加*, 如：
  #+BEGIN_SRC java
    public class Test {
      public static void main(String[] args) {
        String str = "123" + 45 + true + 3.4 + new Test();
        System.out.println(str);
      }
    }
  #+END_SRC

  上述代码的输出为：
  #+BEGIN_EXAMPLE
    12345true3.4Test@15db9742
  #+END_EXAMPLE

