#+TITLE:      设计模式之工厂模式
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com
#+DATE:       <2019-05-25 周六>

* 目录                                                    :TOC_4_gh:noexport:
- [[#前言][前言]]
- [[#开闭原则和依赖倒转原则][开闭原则和依赖倒转原则]]
- [[#简单工厂模式][简单工厂模式]]
- [[#工厂方法模式][工厂方法模式]]
- [[#抽象工厂模式][抽象工厂模式]]
- [[#综合理解][综合理解]]
- [[#结语][结语]]
- [[#footnotes][Footnotes]]

* 前言
  在多次接触设计模式的过程中，工厂模式留给我的印象是最深的，因为，它基本上是各种教程前面必然会出现的一个模式 (￢_￢)
  
  所以，我觉得还是有必要总结一下和工厂模式有关的内容。

* 开闭原则和依赖倒转原则
  说起来，以前学习工厂模式的过程中基本上都只学习了工厂模式的结构是怎么样的，但是却没有去了解为什么是那样的。

  在接触学习了面向对象的设计原则后，感觉开闭原则和依赖倒转原则对理解工厂模式来说是很有帮助的。

  因此，在学习工厂模式是怎么样的之前，可以先来看一看这两个原则。

  其中，开闭原则是指：类应该对扩展开发，对修改关闭。也就是说，我们应该在尽量避免修改已有代码的情况下扩展增加功能。

  而依赖倒转原则是指：依赖抽象，不要依赖具体类。也就是说，我们应该避免对具体类的依赖，而要尽量的依赖抽象。

* 简单工厂模式
  简单工厂模式不是一个设计模式，这是每个教程里面都会有的一句话，这里也不例外。

  简单工厂模式更像是一种编程习惯，其基本理念就是将创建具体类的过程抽取出来，放到某个（静态）方法中：
  #+BEGIN_SRC java
    public class SimplePizzaFactory {
      public Pizza createPizza(String type) {
        Pizza pizza = null;

        if (type.equals("cheese")) {
          pizza = new CheesePizza();
        } else if (type.equals("pepperoni")) {
          pizza = new PepperoniPizza();
        } else if (type.equals("clam")) {
          pizza = new ClamPizza();
        } else if (type.equals("veggie")) {
          pizza = new VeggiePizza();
        }

        return pizza;
      }
    }
  #+END_SRC

  上面的代码是《Head First 设计模式》一书中的例子，它将创建披萨的过程单独的放在了 ~createPizza~ 方法中，使用时只需要传递相应的参数就可以了。

  另外，和常见的方式不同，这个例子中的 ~createPizza~ 方法并不是静态的，书中给与的解释是：非静态的方法可以通过继承的方式进行重写。

  #+HTML: <details><summary><i></i></summary>

  其实，如果通过继承简单工厂的模式重写方法的话，就有点接近工厂方法模式了 @_@

  #+HTML: </details>


  但是简单工厂模式是存在一些问题的：
  1. 每当我们可以创建的具体对象的类型变多了，我们就需要修改简单工厂的代码，这违反了开闭原则
  2. 假如简单工厂中的代码存在错误，那么，所有使用了这个工厂的地方都会存在安全隐患，这违反了单一职责原则[fn:2]

  因此，我们需要改进简单工厂模式，让其遵守面向对象的设计原则。

* 工厂方法模式
  工厂方法模式和简单工厂模式有点像，它在父类中声明用于创建具体对象的 *抽象方法*, 然后由 *子类* 来实现抽象方法。

  其常见的结构为：
  + 抽象工厂：声明了用于创建具体对象的抽象方法[fn:1]
  + 具体工厂：实现了用于创建具体对象的抽象方法
  + 抽象产品：要被创建的具体对象的抽象父类
  + 具体产品：要被创建的具体对象

  类图也许要更加直观一些：
  #+BEGIN_SRC plantuml :exports none
    @startuml
    class 抽象工厂 {
      抽象方法()
    }

    class 具体工厂A
    class 具体工厂B
    class 具体工厂C

    具体工厂A -up-|> 抽象工厂
    具体工厂B -up-|> 抽象工厂
    具体工厂C -up-|> 抽象工厂

    class 抽象产品

    class 具体产品A
    class 具体产品B
    class 具体产品C

    具体产品A -up-|> 抽象产品
    具体产品B -up-|> 抽象产品
    具体产品C -up-|> 抽象产品

    @enduml
  #+END_SRC

  #+HTML: <img src="https://i.loli.net/2019/05/25/5ce8ec1d0832695386.png">

  通过工厂方法模式，当我们增加了具体产品的类型的时候，就只需要增加具体工厂的数量，而不是修改旧的工厂的代码。

* 抽象工厂模式
  抽象工厂模式和工厂方法模式就更接近了，基本上，就只是增加了抽象方法和抽象产品的数量，其类图如下：
  #+BEGIN_SRC plantuml :exports none
    @startuml

    class 抽象工厂 {
      抽象方法X()
      抽象方法Y()
    }

    class 具体工厂A
    class 具体工厂B
    class 具体工厂C

    具体工厂A -up-|> 抽象工厂
    具体工厂B -up-|> 抽象工厂
    具体工厂C -up-|> 抽象工厂


    class 抽象产品X

    class 具体产品XA
    class 具体产品XB
    class 具体产品XC

    class 抽象产品Y

    class 具体产品YA
    class 具体产品YB
    class 具体产品YC

    具体产品XA -up-|> 抽象产品X
    具体产品XB -up-|> 抽象产品X
    具体产品XC -up-|> 抽象产品X

    具体产品YA -up-|> 抽象产品Y
    具体产品YB -up-|> 抽象产品Y
    具体产品YC -up-|> 抽象产品Y

    @enduml
  #+END_SRC

  #+HTML: <img src="https://i.loli.net/2019/05/25/5ce8ee724ea1899220.png">
  
  具体工厂和具体产品之间的依赖关系：
  #+BEGIN_SRC plantuml :exports none
    @startuml

    class 抽象工厂 {
      抽象方法X()
      抽象方法Y()
    }

    class 具体工厂A
    class 具体工厂B
    class 具体工厂C

    具体工厂A -up-|> 抽象工厂
    具体工厂B -up-|> 抽象工厂
    具体工厂C -up-|> 抽象工厂


    class 抽象产品X

    class 具体产品XA
    class 具体产品XB
    class 具体产品XC

    class 抽象产品Y

    class 具体产品YA
    class 具体产品YB
    class 具体产品YC

    具体产品XA -up-|> 抽象产品X
    具体产品XB -up-|> 抽象产品X
    具体产品XC -up-|> 抽象产品X

    具体产品YA -up-|> 抽象产品Y
    具体产品YB -up-|> 抽象产品Y
    具体产品YC -up-|> 抽象产品Y

    具体工厂A ..> 具体产品YA
    具体工厂A ..> 具体产品XA

    具体工厂B ..> 具体产品YB
    具体工厂B ..> 具体产品XB

    具体工厂C ..> 具体产品YC
    具体工厂C ..> 具体产品XC

    @enduml
  #+END_SRC

  #+HTML: <img src="https://i.loli.net/2019/05/25/5ce8f9368d11c36366.png">

  可以发现，抽象工厂模式和工厂方法模式的差别并不是很大，只不过，一个负责创建一系列的对象，而另一个只创建某一类型的对象。

  某种程度上，可以说是抽象工厂模式包含了工厂方法模式。

* 综合理解
  设计模式的设计依据是面向对象的设计原则，因此，在理解设计模式的时候，应该参考相应的设计原则。

  而和工厂模式的理解相关的设计原则，主要应该是开闭原则和依赖倒转原则：
  + 遵循开闭原则，通过继承扩展的方式增加功能，而不是修改已有的代码
  + 依赖倒转原则，通过抽象工厂和产品的方式，让使用者依赖少量的抽象类型，让具体实现依赖抽象

  当然了，还有单一职责原则，避免单个类的职责过重。

* 结语
  据说学习设计模式容易陷入一个误区，那就是到处都在用设计模式，使得整体代码变得复杂且难以理解。

  所以说，应该只在有必要的时候使用设计模式，避免因为设计模式的原因让你的代码太过复杂。

* Footnotes

[fn:1] 在《Head First 设计模式》一书中并没有要求工厂方法模式的父工厂需要是 *抽象类*

[fn:2] 类的职责要单一，不要将太多的职责放在一个类中
  
